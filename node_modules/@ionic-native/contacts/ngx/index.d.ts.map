{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport declare type ContactFieldType = '*' | 'addresses' | 'birthday' | 'categories' | 'country' | 'department' | 'displayName' | 'emails' | 'name.familyName' | 'name.formatted' | 'name.givenName' | 'name.honorificPrefix' | 'name.honorificSuffix' | 'id' | 'ims' | 'locality' | 'name.middleName' | 'name' | 'nickname' | 'note' | 'organizations' | 'phoneNumbers' | 'photos' | 'postalCode' | 'region' | 'streetAddress' | 'title' | 'urls';\nexport interface IContactProperties {\n    /** A globally unique identifier. */\n    id?: string;\n    /** A globally unique identifier on Android. */\n    rawId?: string;\n    /** The name of this Contact, suitable for display to end users. */\n    displayName?: string;\n    /** An object containing all components of a persons name. */\n    name?: IContactName;\n    /** A casual name by which to address the contact. */\n    nickname?: string;\n    /** An array of all the contact's phone numbers. */\n    phoneNumbers?: IContactField[];\n    /** An array of all the contact's email addresses. */\n    emails?: IContactField[];\n    /** An array of all the contact's addresses. */\n    addresses?: IContactAddress[];\n    /** An array of all the contact's IM addresses. */\n    ims?: IContactField[];\n    /** An array of all the contact's organizations. */\n    organizations?: IContactOrganization[];\n    /** The birthday of the contact. */\n    birthday?: Date;\n    /** A note about the contact. */\n    note?: string;\n    /** An array of the contact's photos. */\n    photos?: IContactField[];\n    /** An array of all the user-defined categories associated with the contact. */\n    categories?: IContactField[];\n    /** An array of web pages associated with the contact. */\n    urls?: IContactField[];\n}\n/**\n * @hidden\n */\nexport declare class Contact implements IContactProperties {\n    id: string;\n    displayName: string;\n    name: IContactName;\n    nickname: string;\n    phoneNumbers: IContactField[];\n    emails: IContactField[];\n    addresses: IContactAddress[];\n    ims: IContactField[];\n    organizations: IContactOrganization[];\n    birthday: Date;\n    note: string;\n    photos: IContactField[];\n    categories: IContactField[];\n    urls: IContactField[];\n    private _objectInstance;\n    [key: string]: any;\n    constructor();\n    clone(): Contact;\n    remove(): Promise<any>;\n    save(): Promise<any>;\n}\n/**\n * @hidden\n */\nexport interface IContactError {\n    /** Error code */\n    code: number;\n    /** Error message */\n    message: string;\n}\n/**\n * @hidden\n */\nexport declare const ContactError: {\n    new (code: number): IContactError;\n    UNKNOWN_ERROR: number;\n    INVALID_ARGUMENT_ERROR: number;\n    TIMEOUT_ERROR: number;\n    PENDING_OPERATION_ERROR: number;\n    IO_ERROR: number;\n    NOT_SUPPORTED_ERROR: number;\n    PERMISSION_DENIED_ERROR: number;\n};\nexport interface IContactName {\n    /** The complete name of the contact. */\n    formatted?: string;\n    /** The contact's family name. */\n    familyName?: string;\n    /** The contact's given name. */\n    givenName?: string;\n    /** The contact's middle name. */\n    middleName?: string;\n    /** The contact's prefix (example Mr. or Dr.) */\n    honorificPrefix?: string;\n    /** The contact's suffix (example Esq.). */\n    honorificSuffix?: string;\n}\n/**\n * @hidden\n */\nexport declare class ContactName implements IContactName {\n    formatted?: string;\n    familyName?: string;\n    givenName?: string;\n    middleName?: string;\n    honorificPrefix?: string;\n    honorificSuffix?: string;\n    constructor(formatted?: string, familyName?: string, givenName?: string, middleName?: string, honorificPrefix?: string, honorificSuffix?: string);\n}\nexport interface IContactField {\n    /** A string that indicates what type of field this is, home for example. */\n    type?: string;\n    /** The value of the field, such as a phone number or email address. */\n    value?: string;\n    /** Set to true if this ContactField contains the user's preferred value. */\n    pref?: boolean;\n}\n/**\n * @hidden\n */\nexport declare class ContactField implements IContactField {\n    type?: string;\n    value?: string;\n    pref?: boolean;\n    constructor(type?: string, value?: string, pref?: boolean);\n}\nexport interface IContactAddress {\n    /** Set to true if this ContactAddress contains the user's preferred value. */\n    pref?: boolean;\n    /** A string indicating what type of field this is, home for example. */\n    type?: string;\n    /** The full address formatted for display. */\n    formatted?: string;\n    /** The full street address. */\n    streetAddress?: string;\n    /** The city or locality. */\n    locality?: string;\n    /** The state or region. */\n    region?: string;\n    /** The zip code or postal code. */\n    postalCode?: string;\n    /** The country name. */\n    country?: string;\n}\n/**\n * @hidden\n */\nexport declare class ContactAddress implements IContactAddress {\n    pref?: boolean;\n    type?: string;\n    formatted?: string;\n    streetAddress?: string;\n    locality?: string;\n    region?: string;\n    postalCode?: string;\n    country?: string;\n    constructor(pref?: boolean, type?: string, formatted?: string, streetAddress?: string, locality?: string, region?: string, postalCode?: string, country?: string);\n}\nexport interface IContactOrganization {\n    /** Set to true if this ContactOrganization contains the user's preferred value. */\n    pref?: boolean;\n    /** A string that indicates what type of field this is, home for example. */\n    type?: string;\n    /** The name of the organization. */\n    name?: string;\n    /** The department the contract works for. */\n    department?: string;\n    /** The contact's title at the organization. */\n    title?: string;\n}\n/**\n * @hidden\n */\nexport declare class ContactOrganization implements IContactOrganization {\n    type?: string;\n    name?: string;\n    department?: string;\n    title?: string;\n    pref?: boolean;\n    constructor(type?: string, name?: string, department?: string, title?: string, pref?: boolean);\n}\n/** Search options to filter navigator.contacts.  */\nexport interface IContactFindOptions {\n    /** The search string used to find navigator.contacts. */\n    filter?: string;\n    /** Determines if the find operation returns multiple navigator.contacts. Defaults to false. */\n    multiple?: boolean;\n    /** Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. */\n    desiredFields?: string[];\n    /**\n     * (Android only): Filters the search to only return contacts with a phone number informed.\n     */\n    hasPhoneNumber?: boolean;\n}\n/**\n * @hidden\n */\nexport declare class ContactFindOptions implements IContactFindOptions {\n    filter?: string;\n    multiple?: boolean;\n    desiredFields?: string[];\n    hasPhoneNumber?: boolean;\n    constructor(filter?: string, multiple?: boolean, desiredFields?: string[], hasPhoneNumber?: boolean);\n}\n/**\n * @name Contacts\n * @premier contacts\n * @description\n * Access and manage Contacts on the device.\n *\n * @deprecated\n * @usage\n *\n * ```typescript\n * import { Contacts, Contact, ContactField, ContactName } from '@ionic-native/contacts/ngx';\n *\n * constructor(private contacts: Contacts) { }\n *\n * let contact: Contact = this.contacts.create();\n *\n * contact.name = new ContactName(null, 'Smith', 'John');\n * contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n * contact.save().then(\n *   () => console.log('Contact saved!', contact),\n *   (error: any) => console.error('Error saving contact.', error)\n * );\n *\n * ```\n * @classes\n * Contact\n * @interfaces\n * IContactProperties\n * IContactError\n * IContactName\n * IContactField\n * IContactAddress\n * IContactOrganization\n * IContactFindOptions\n */\nexport declare class Contacts extends IonicNativePlugin {\n    /**\n     * Create a single contact.\n     * @returns {Contact} Returns a Contact object\n     */\n    create(): Contact;\n    /**\n     * Search for contacts in the Contacts list.\n     * @param {ContactFieldType[]} fields Contact fields to be used as a search qualifier\n     * @param {IContactFindOptions} [options] Optional options for the query\n     * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)\n     */\n    find(fields: ContactFieldType[], options?: IContactFindOptions): Promise<Contact[]>;\n    /**\n     * Select a single Contact.\n     * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact\n     */\n    pickContact(): Promise<Contact>;\n}\n"]}
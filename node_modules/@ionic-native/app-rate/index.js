var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var AppRateOriginal = /** @class */ (function (_super) {
    __extends(AppRateOriginal, _super);
    function AppRateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRateOriginal.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRateOriginal.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRateOriginal.prototype, "preferences", {
        get: function () { return cordovaPropertyGet(this, "preferences"); },
        set: function (value) { cordovaPropertySet(this, "preferences", value); },
        enumerable: true,
        configurable: true
    });
    AppRateOriginal.pluginName = "AppRate";
    AppRateOriginal.plugin = "cordova-plugin-apprate";
    AppRateOriginal.pluginRef = "AppRate";
    AppRateOriginal.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRateOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    return AppRateOriginal;
}(IonicNativePlugin));
var AppRate = new AppRateOriginal();
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1yYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHNFQUF1RCxNQUFNLG9CQUFvQixDQUFDOztJQTZMNUQsMkJBQWlCOzs7O0lBYTVDLGlDQUFlLGFBQUMsV0FBb0I7SUFNcEMsb0NBQWtCOzBCQWJsQixnQ0FBVzs7Ozs7Ozs7Ozs7a0JBcE1iO0VBOEw2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwUmF0ZVByZWZlcmVuY2VzIHtcbiAgLyoqXG4gICAqIEN1c3RvbSBCQ1AgNDcgbGFuZ3VhZ2UgdGFnXG4gICAqL1xuICB1c2VMYW5ndWFnZT86IHN0cmluZztcblxuICAvKipcbiAgICogQ3VzdG9tIGFwcGxpY2F0aW9uIHRpdGxlXG4gICAqL1xuICBkaXNwbGF5QXBwTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogU2hvdyBkaWFsb2cgYWdhaW4gd2hlbiBhcHBsaWNhdGlvbiB2ZXJzaW9uIHdpbGwgYmUgdXBkYXRlZC4gRGVmYXVsdHMgdG8gYHRydWVgXG4gICAqL1xuICBwcm9tcHRBZ2FpbkZvckVhY2hOZXdWZXJzaW9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogY291bnQgb2YgcnVucyBvZiBhcHBsaWNhdGlvbiBiZWZvcmUgZGlhbG9nIHdpbGwgYmUgZGlzcGxheWVkLiBEZWZhdWx0cyB0byBgM2BcbiAgICovXG4gIHVzZXNVbnRpbFByb21wdD86IG51bWJlcjtcblxuICAvKipcbiAgICogU2ltcGxlIE1vZGUgdG8gZGlzcGxheSB0aGUgcmF0ZSBkaWFsb2cgZGlyZWN0bHkgYW5kIGJ5cGFzcyBuZWdhdGl2ZSBmZWVkYmFjayBmaWx0ZXJpbmcgZmxvd1xuICAgKi9cbiAgc2ltcGxlTW9kZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIGxlYXZlIGFwcCBvciBubyB3aGVuIGFwcGxpY2F0aW9uIHBhZ2Ugb3BlbmVkIGluIGFwcCBzdG9yZSAobm93IHN1cHBvcnRlZCBvbmx5IGZvciBpT1MpLiBEZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICBpbkFwcFJldmlldz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIHVzZSBjdXN0b20gdmlldyBmb3IgcmF0ZSBkaWFsb2cuIERlZmF1bHRzIHRvIGBmYWxzZWBcbiAgICovXG4gIHVzZUN1c3RvbVJhdGVEaWFsb2c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gbG9jYWxlIG9iamVjdFxuICAgKi9cbiAgY3VzdG9tTG9jYWxlPzogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcblxuICAvKipcbiAgICogQ2FsbGJhY2tzIGZvciBldmVudHNcbiAgICovXG4gIGNhbGxiYWNrcz86IEFwcFJhdGVDYWxsYmFja3M7XG5cbiAgLyoqXG4gICAqIEFwcCBTdG9yZSBVUkxTXG4gICAqL1xuICBzdG9yZUFwcFVSTD86IEFwcFVybHM7XG5cbiAgLyoqXG4gICAqIE9wZW4gVVJMIGZ1bmN0aW9uXG4gICAqL1xuICBvcGVuVXJsPzogKHVybDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xuICAvKiogVGl0bGUgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIE1lc3NhZ2UgKi9cbiAgbWVzc2FnZT86IHN0cmluZztcblxuICAvKiogQ2FuY2VsIGJ1dHRvbiBsYWJlbCAqL1xuICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTGF0ZXIgYnV0dG9uIGxhYmVsICovXG4gIGxhdGVyQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFJhdGUgYnV0dG9uIGxhYmVsICovXG4gIHJhdGVCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogWWVzIGJ1dHRvbiBsYWJlbCAqL1xuICB5ZXNCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTm8gYnV0dG9uIGxhYmVsICovXG4gIG5vQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIEFwcCByYXRlIHByb21wdCB0aXRsZSAqL1xuICBhcHBSYXRlUHJvbXB0VGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIEZlZWRiYWNrIHByb21wdCB0aXRsZSAqL1xuICBmZWVkYmFja1Byb21wdFRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xuICBhcHBSYXRlUHJvbXB0TWVzc2FnZT86IHN0cmluZztcblxuICAvKiogRmVlZGJhY2sgcHJvbXB0IG1lc3NhZ2UgKi9cbiAgZmVlZGJhY2tQcm9tcHRNZXNzYWdlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDYWxsYmFja3Mge1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gcmF0ZS1kaWFsb2cgYnV0dG9uc1xuICAgKi9cbiAgb25CdXR0b25DbGlja2VkPzogRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZ1xuICAgKi9cbiAgb25SYXRlRGlhbG9nU2hvdz86IEZ1bmN0aW9uO1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gbmVnYXRpdmUgZmVlZGJhY2tcbiAgICovXG4gIGhhbmRsZU5lZ2F0aXZlRmVlZGJhY2s/OiBGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBVcmxzIHtcbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIGlkIGluIEFwcFN0b3JlXG4gICAqL1xuICBpb3M/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBHb29nbGVQbGF5XG4gICAqL1xuICBhbmRyb2lkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93cyBTdG9yZVxuICAgKi9cbiAgd2luZG93cz86IHN0cmluZztcblxuICAvKipcbiAgICogYXBwbGljYXRpb24gVVJMIGluIEFwcFdvcmxkXG4gICAqL1xuICBibGFja2JlcnJ5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93c1N0b3JlXG4gICAqL1xuICB3aW5kb3dzOD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBBcHAgUmF0ZVxuICogQHByZW1pZXIgYXBwLXJhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEFwcFJhdGUgcGx1Z2luIG1ha2VzIGl0IGVhc3kgdG8gcHJvbXB0IHRoZSB1c2VyIHRvIHJhdGUgeW91ciBhcHAsIGVpdGhlciBub3csIGxhdGVyLCBvciBuZXZlci5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tYXBwcmF0ZS4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0FwcFJhdGUgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9wdXNoYW5kcGxheS9jb3Jkb3ZhLXBsdWdpbi1hcHByYXRlKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFwcFJhdGUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FwcC1yYXRlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhcHBSYXRlOiBBcHBSYXRlKSB7IH1cbiAqXG4gKiAuLi5cbiAqIC8vIHNldCBjZXJ0YWluIHByZWZlcmVuY2VzXG4gKiB0aGlzLmFwcFJhdGUucHJlZmVyZW5jZXMuc3RvcmVBcHBVUkwgPSB7XG4gKiAgIGlvczogJzxhcHBfaWQ+JyxcbiAqICAgYW5kcm9pZDogJ21hcmtldDovL2RldGFpbHM/aWQ9PHBhY2thZ2VfbmFtZT4nLFxuICogICB3aW5kb3dzOiAnbXMtd2luZG93cy1zdG9yZTovL3Jldmlldy8/UHJvZHVjdElkPTxzdG9yZV9pZD4nXG4gKiB9XG4gKlxuICogdGhpcy5hcHBSYXRlLnByb21wdEZvclJhdGluZyh0cnVlKTtcbiAqXG4gKiAvLyBvciwgb3ZlcnJpZGUgdGhlIHdob2xlIHByZWZlcmVuY2VzIG9iamVjdFxuICogdGhpcy5hcHBSYXRlLnByZWZlcmVuY2VzID0ge1xuICogICB1c2VzVW50aWxQcm9tcHQ6IDMsXG4gKiAgIHN0b3JlQXBwVVJMOiB7XG4gKiAgICBpb3M6ICc8YXBwX2lkPicsXG4gKiAgICBhbmRyb2lkOiAnbWFya2V0Oi8vZGV0YWlscz9pZD08cGFja2FnZV9uYW1lPicsXG4gKiAgICB3aW5kb3dzOiAnbXMtd2luZG93cy1zdG9yZTovL3Jldmlldy8/UHJvZHVjdElkPTxzdG9yZV9pZD4nXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKGZhbHNlKTtcbiAqIGBgYFxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBBcHBSYXRlUHJlZmVyZW5jZXNcbiAqIEFwcFVybHNcbiAqIEFwcFJhdGVDYWxsYmFja3NcbiAqIEFwcFJhdGVDdXN0b21Mb2NhbFxuICpcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBcHBSYXRlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gIHBsdWdpblJlZjogJ0FwcFJhdGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcFJhdGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25maWd1cmUgdmFyaW91cyBzZXR0aW5ncyBmb3IgdGhlIFJhdGluZyBWaWV3LlxuICAgKiBTZWUgdGFibGUgYmVsb3cgZm9yIG9wdGlvbnNcbiAgICovXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBwcmVmZXJlbmNlczogQXBwUmF0ZVByZWZlcmVuY2VzO1xuXG4gIC8qKlxuICAgKiBQcm9tcHRzIHRoZSB1c2VyIGZvciByYXRpbmdcbiAgICogQHBhcmFtIHtib29sZWFufSBpbW1lZGlhdGVseSAgU2hvdyB0aGUgcmF0aW5nIHByb21wdCBpbW1lZGlhdGVseS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcHJvbXB0Rm9yUmF0aW5nKGltbWVkaWF0ZWx5OiBib29sZWFuKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBJbW1lZGlhdGVseSBzZW5kIHRoZSB1c2VyIHRvIHRoZSBhcHAgc3RvcmUgcmF0aW5nIHBhZ2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbmF2aWdhdGVUb0FwcFN0b3JlKCk6IHZvaWQge31cbn1cbiJdfQ==
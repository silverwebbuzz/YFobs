{"version":3,"file":"pinch-zoom.component.d.ts","sources":["pinch-zoom.component.d.ts"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA","sourcesContent":["import { ElementRef, OnDestroy } from '@angular/core';\r\nimport { Properties } from './interfaces';\r\nexport declare class PinchZoomComponent implements OnDestroy {\r\n    private elementRef;\r\n    pinchZoom: any;\r\n    _properties: Properties;\r\n    set properties(value: Properties);\r\n    get properties(): Properties;\r\n    transitionDuration: number;\r\n    doubleTap: boolean;\r\n    doubleTapScale: number;\r\n    autoZoomOut: boolean;\r\n    limitZoom: number | \"original image size\";\r\n    disabled: boolean;\r\n    disablePan: boolean;\r\n    overflow: \"hidden\" | \"visible\";\r\n    zoomControlScale: number;\r\n    disableZoomControl: \"disable\" | \"never\" | \"auto\";\r\n    backgroundColor: string;\r\n    limitPan: boolean;\r\n    minPanScale: number;\r\n    minScale: number;\r\n    listeners: 'auto' | 'mouse and touch';\r\n    wheel: boolean;\r\n    autoHeight: boolean;\r\n    wheelZoomFactor: number;\r\n    draggableImage: boolean;\r\n    get hostOverflow(): VisibilityState;\r\n    get hostBackgroundColor(): string;\r\n    get isTouchScreen(): boolean;\r\n    get isDragging(): any;\r\n    get isDisabled(): number;\r\n    get scale(): any;\r\n    get isZoomedIn(): boolean;\r\n    constructor(elementRef: ElementRef);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: any): void;\r\n    ngOnDestroy(): void;\r\n    initPinchZoom(): void;\r\n    getProperties(changes: any): {};\r\n    renameProperties(options: Properties): Properties;\r\n    applyOptionsDefault(defaultOptions: any, options: any): void;\r\n    toggleZoom(): void;\r\n    isControl(): boolean;\r\n    pollLimitZoom(): void;\r\n    destroy(): void;\r\n}\r\n"]}
/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Output, EventEmitter, Input } from '@angular/core';
import { of, fromEvent } from "rxjs";
import { debounceTime, map, switchMap, tap } from "rxjs/operators";
var NgxAutocompleteComponent = /** @class */ (function () {
    function NgxAutocompleteComponent() {
        this.selectedValue = new EventEmitter();
        this.data = [];
        this.showSearches = false;
        this.isSearching = false;
        this.activeSuggestion = 0;
    }
    /**
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dataSearch();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.getData = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        /** @type {?} */
        var data = this.entries.filter((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            return val[_this.searchKeyword].toLowerCase().includes(name.toLowerCase()) == true;
        }));
        return of(data);
    };
    /**
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.dataSearch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var search$ = fromEvent(this.searchInput.nativeElement, 'input').pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.target.value; })), debounceTime(500), tap((/**
         * @return {?}
         */
        function () { return _this.isSearching = true; })), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        function (term) { return term ? _this.getData(term) : of([]); })), tap((/**
         * @return {?}
         */
        function () {
            _this.isSearching = false,
                _this.showSearches = true;
        })));
        search$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.isSearching = false;
            _this.data = data;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.setValue = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var value = data[this.searchKeyword];
        this.searchInput.nativeElement.value = value;
        this.data = [data];
        this.activeSuggestion = 0;
        this.selectedValue.emit(data);
        this.showSearches = false;
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.trackById = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item._id;
    };
    /**
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.closeDropDown = /**
     * @return {?}
     */
    function () {
        this.showSearches = false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.changeSuggestion = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.keyCode === 13) {
            if (this.data.length != 0) {
                this.setValue(this.data[this.activeSuggestion]);
                this.scrollTo();
            }
        }
        // User pressed the up arrow
        else if (e.keyCode == 38) {
            if (this.activeSuggestion == 0) {
                return false;
            }
            else {
                this.activeSuggestion = this.activeSuggestion - 1;
                this.scrollTo();
            }
        }
        // User pressed the down arrow
        else if (e.keyCode == 40) {
            if (this.activeSuggestion == this.data.length - 1) {
                return false;
            }
            else {
                this.activeSuggestion = this.activeSuggestion + 1;
                this.scrollTo();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxAutocompleteComponent.prototype.scrollTo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var str = "list" + this.activeSuggestion;
        /** @type {?} */
        var elmnt = document.getElementById(str);
        elmnt.scrollIntoView();
        window.scrollTo(0, 0);
    };
    NgxAutocompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-autocomplete',
                    template: "\n    <div class=\"position-relative\">\n\n    <input type=\"text\" class=\"form-control\" [placeholder]=\"placeholderValue\" id=\"auto-search\" #searchInput autocomplete=\"off\" [id]=\"inputId+1\" (click)=\"showSearches = true\" (keyup)=\"changeSuggestion($event)\">\n    \n    <div [id]=\"inputId+2\" clickOutside (clickOutside)=\"closeDropDown()\" [inputId]=\"inputId+1\" [hidden]=\"!showSearches\" class=\"dropdown-content\">\n        <a *ngFor=\"let entry of data; trackBy: trackById;let i = index\" tappable (click)=\"setValue(entry)\"  [ngClass]=\"{ 'suggestion-active' : i == activeSuggestion} \" id=\"list{{i}}\">\n                {{entry[searchKeyword] }}   \n        </a>\n        <a *ngIf=\"data && data.length <= 0 && !isSearching\" >No Data Found</a>\n        <a *ngIf=\"isSearching\">Searching...</a>\n    </div>\n    \n  </div>\n  ",
                    styles: ["\n  \n    .dropdown-content {\n      background-color: #fafafa;\n      width: 100%;\n      max-height: 150px;\n      overflow-y: auto;\n      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n      z-index: 1;\n      cursor: pointer;\n    }\n\n    .dropdown-content a {\n      color: black;\n      padding: 15px 18px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .suggestion-active, .dropdown-content a:hover {background-color: #f1f1f1}\n\n    input {\n      width: 100%;\n      padding: 12px 20px;\n      margin: 8px 0;\n      box-sizing: border-box;\n    }\n \n  "]
                }] }
    ];
    /** @nocollapse */
    NgxAutocompleteComponent.ctorParameters = function () { return []; };
    NgxAutocompleteComponent.propDecorators = {
        entries: [{ type: Input }],
        placeholderValue: [{ type: Input }],
        inputId: [{ type: Input }],
        searchKeyword: [{ type: Input }],
        searchInput: [{ type: ViewChild, args: ['searchInput', { static: true },] }],
        selectedValue: [{ type: Output }]
    };
    return NgxAutocompleteComponent;
}());
export { NgxAutocompleteComponent };
if (false) {
    /** @type {?} */
    NgxAutocompleteComponent.prototype.entries;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.placeholderValue;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.inputId;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchKeyword;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchInput;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.selectedValue;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.data;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.showSearches;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.isSearching;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.activeSuggestion;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchValue;
}
//# sourceMappingURL=data:application/json;base64,
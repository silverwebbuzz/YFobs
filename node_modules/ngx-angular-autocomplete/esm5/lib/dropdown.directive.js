/**
 * @fileoverview added by tsickle
 * Generated from: lib/dropdown.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Output, EventEmitter, HostListener, Input } from '@angular/core';
var DropdownDirective = /** @class */ (function () {
    function DropdownDirective(_elementRef) {
        this._elementRef = _elementRef;
        this.clickOutside = new EventEmitter();
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    DropdownDirective.prototype.onClick = /**
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        if (targetElement.id == this.inputId) {
            return;
        }
        /** @type {?} */
        var isClickedInside = this._elementRef.nativeElement.contains(targetElement);
        if (!isClickedInside) {
            this.clickOutside.emit(null);
        }
    };
    DropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[clickOutside]',
                },] }
    ];
    /** @nocollapse */
    DropdownDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DropdownDirective.propDecorators = {
        clickOutside: [{ type: Output }],
        inputId: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
    };
    return DropdownDirective;
}());
export { DropdownDirective };
if (false) {
    /** @type {?} */
    DropdownDirective.prototype.clickOutside;
    /** @type {?} */
    DropdownDirective.prototype.inputId;
    /**
     * @type {?}
     * @private
     */
    DropdownDirective.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFuZ3VsYXItYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsibGliL2Ryb3Bkb3duLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRztJQU1JLDJCQUFvQixXQUF1QjtRQUF2QixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUYxQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFHbkQsQ0FBQzs7Ozs7SUFHTSxtQ0FBTzs7OztJQURkLFVBQ2UsYUFBYTtRQUN4QixJQUFJLGFBQWEsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUFFLE9BQU87U0FBRTs7WUFDM0MsZUFBZSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFDOUUsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7O2dCQWhCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtpQkFDN0I7Ozs7Z0JBSm1CLFVBQVU7OzsrQkFNekIsTUFBTTswQkFDTixLQUFLOzBCQUlMLFlBQVksU0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGVBQWUsQ0FBQzs7SUFRckQsd0JBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWRZLGlCQUFpQjs7O0lBQzFCLHlDQUFtRDs7SUFDbkQsb0NBQXNCOzs7OztJQUNWLHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbY2xpY2tPdXRzaWRlXScsXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duRGlyZWN0aXZlIHtcbiAgICBAT3V0cHV0KCkgcHVibGljIGNsaWNrT3V0c2lkZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBASW5wdXQoKSBpbnB1dElkOiBhbnk7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJywgWyckZXZlbnQudGFyZ2V0J10pXG4gICAgcHVibGljIG9uQ2xpY2sodGFyZ2V0RWxlbWVudCkge1xuICAgICAgICBpZiAodGFyZ2V0RWxlbWVudC5pZCA9PSB0aGlzLmlucHV0SWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IGlzQ2xpY2tlZEluc2lkZSA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgaWYgKCFpc0NsaWNrZWRJbnNpZGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tPdXRzaWRlLmVtaXQobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG59Il19
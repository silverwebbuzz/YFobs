{"version":3,"sources":["ng://ngx-angular-autocomplete/lib/ngx-autocomplete.service.ts","ng://ngx-angular-autocomplete/lib/ngx-autocomplete.component.ts","ng://ngx-angular-autocomplete/lib/dropdown.directive.ts","ng://ngx-angular-autocomplete/lib/ngx-autocomplete.module.ts"],"names":["NgxAutocompleteService","Injectable","args","providedIn","NgxAutocompleteComponent","this","selectedValue","EventEmitter","data","showSearches","isSearching","activeSuggestion","prototype","ngOnInit","dataSearch","getData","name","_this","entries","filter","val","searchKeyword","toLowerCase","includes","of","fromEvent","searchInput","nativeElement","pipe","map","event","target","value","debounceTime","tap","switchMap","term","subscribe","setValue","emit","trackById","index","item","_id","closeDropDown","changeSuggestion","e","keyCode","length","scrollTo","str","document","getElementById","scrollIntoView","window","Component","selector","template","Input","ViewChild","static","Output","DropdownDirective","_elementRef","clickOutside","onClick","targetElement","id","inputId","contains","Directive","ElementRef","HostListener","NgxAutocompleteModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAutocompleteService {\n\n  constructor() { }\n}\n","import { Component, OnInit, ViewChild, ElementRef, Output, EventEmitter, Input } from '@angular/core';\nimport { of, fromEvent, Observable } from \"rxjs\";\nimport { debounceTime, map, distinctUntilChanged, switchMap, tap } from \"rxjs/operators\";\n\n@Component({\n  selector: 'ngx-autocomplete',\n  template: `\n    <div class=\"position-relative\">\n\n    <input type=\"text\" class=\"form-control\" [placeholder]=\"placeholderValue\" id=\"auto-search\" #searchInput autocomplete=\"off\" [id]=\"inputId+1\" (click)=\"showSearches = true\" (keyup)=\"changeSuggestion($event)\">\n    \n    <div [id]=\"inputId+2\" clickOutside (clickOutside)=\"closeDropDown()\" [inputId]=\"inputId+1\" [hidden]=\"!showSearches\" class=\"dropdown-content\">\n        <a *ngFor=\"let entry of data; trackBy: trackById;let i = index\" tappable (click)=\"setValue(entry)\"  [ngClass]=\"{ 'suggestion-active' : i == activeSuggestion} \" id=\"list{{i}}\">\n                {{entry[searchKeyword] }}   \n        </a>\n        <a *ngIf=\"data && data.length <= 0 && !isSearching\" >No Data Found</a>\n        <a *ngIf=\"isSearching\">Searching...</a>\n    </div>\n    \n  </div>\n  `,\n  styles: [`\n  \n    .dropdown-content {\n      background-color: #fafafa;\n      width: 100%;\n      max-height: 150px;\n      overflow-y: auto;\n      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n      z-index: 1;\n      cursor: pointer;\n    }\n\n    .dropdown-content a {\n      color: black;\n      padding: 15px 18px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .suggestion-active, .dropdown-content a:hover {background-color: #f1f1f1}\n\n    input {\n      width: 100%;\n      padding: 12px 20px;\n      margin: 8px 0;\n      box-sizing: border-box;\n    }\n \n  `]\n})\nexport class NgxAutocompleteComponent implements OnInit {\n\n  @Input() entries: Array<any>;\n  @Input() placeholderValue: string;\n  @Input() inputId: string;\n  @Input() searchKeyword: any;\n  @ViewChild('searchInput', { static: true }) searchInput: ElementRef;\n  @Output() selectedValue = new EventEmitter<any>();\n\n  data: any = [];\n  showSearches: boolean = false;\n  isSearching: boolean = false;\n  activeSuggestion = 0;\n  searchValue: any;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.dataSearch();\n  }\n\n  getData(name): Observable<any> {\n    let data = this.entries.filter((val) => {\n      return val[this.searchKeyword].toLowerCase().includes(name.toLowerCase()) == true;\n    })\n    return of(data);\n  }\n\n  dataSearch() {\n    const search$ = fromEvent(this.searchInput.nativeElement, 'input').pipe(\n      map((event: any) => event.target.value),\n      debounceTime(500),\n      tap(() => this.isSearching = true),\n      switchMap((term) => term ? this.getData(term) : of([])),\n      tap(() => {\n        this.isSearching = false,\n          this.showSearches = true;\n      }));\n\n    search$.subscribe(data => {\n      this.isSearching = false\n      this.data = data;\n    })\n  }\n\n  setValue(data) {\n    let value = data[this.searchKeyword];\n    this.searchInput.nativeElement.value = value;\n    this.data = [data];\n    this.activeSuggestion = 0;\n    this.selectedValue.emit(data);\n    this.showSearches = false;\n  }\n\n\n  trackById(index, item): void {\n    return item._id;\n  }\n\n  closeDropDown(): void {\n    this.showSearches = false;\n  }\n\n  changeSuggestion(e) {\n    if (e.keyCode === 13) {\n      if( this.data.length != 0) {\n        this.setValue(this.data[this.activeSuggestion])\n        this.scrollTo();\n      }\n    }\n    // User pressed the up arrow\n    else if (e.keyCode == 38) {\n      if (this.activeSuggestion == 0) {\n        return false;\n      }\n      else {\n        this.activeSuggestion = this.activeSuggestion - 1;\n        this.scrollTo();\n      }\n    }\n    // User pressed the down arrow\n    else if (e.keyCode == 40) {\n      if (this.activeSuggestion == this.data.length - 1) {\n        return false;\n      }\n      else {\n        this.activeSuggestion = this.activeSuggestion + 1;\n        this.scrollTo();\n      }\n    }\n  }\n\n  private scrollTo() {\n    let str = `list${this.activeSuggestion}`;\n    let elmnt = document.getElementById(str);\n    elmnt.scrollIntoView();\n    window.scrollTo(0, 0);\n  }\n\n}\n","import { Directive, ElementRef, Output, EventEmitter, HostListener, Input } from '@angular/core';\n\n@Directive({\n    selector: '[clickOutside]',\n})\nexport class DropdownDirective {\n    @Output() public clickOutside = new EventEmitter();\n    @Input() inputId: any;\n    constructor(private _elementRef: ElementRef) {\n    }\n\n    @HostListener('document:click', ['$event.target'])\n    public onClick(targetElement) {\n        if (targetElement.id == this.inputId) { return; }\n        const isClickedInside = this._elementRef.nativeElement.contains(targetElement);\n        if (!isClickedInside) {\n            this.clickOutside.emit(null);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { NgxAutocompleteComponent } from './ngx-autocomplete.component';\nimport { CommonModule } from '@angular/common';\nimport { DropdownDirective } from './dropdown.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxAutocompleteComponent,\n    DropdownDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NgxAutocompleteComponent\n  ]\n})\nexport class NgxAutocompleteModule { }\n"]}
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators"),require("@angular/common")):"function"==typeof define&&define.amd?define("ngx-angular-autocomplete",["exports","@angular/core","rxjs","rxjs/operators","@angular/common"],t):t((e=e||self)["ngx-angular-autocomplete"]={},e.ng.core,e.rxjs,e.rxjs.operators,e.ng.common)}(this,(function(e,t,n,o,i){"use strict";var r=function(){function e(){}return e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}(),a=function(){function e(){this.selectedValue=new t.EventEmitter,this.data=[],this.showSearches=!1,this.isSearching=!1,this.activeSuggestion=0}return e.prototype.ngOnInit=function(){this.dataSearch()},e.prototype.getData=function(e){var t=this,o=this.entries.filter((function(n){return 1==n[t.searchKeyword].toLowerCase().includes(e.toLowerCase())}));return n.of(o)},e.prototype.dataSearch=function(){var e=this;n.fromEvent(this.searchInput.nativeElement,"input").pipe(o.map((function(e){return e.target.value})),o.debounceTime(500),o.tap((function(){return e.isSearching=!0})),o.switchMap((function(t){return t?e.getData(t):n.of([])})),o.tap((function(){e.isSearching=!1,e.showSearches=!0}))).subscribe((function(t){e.isSearching=!1,e.data=t}))},e.prototype.setValue=function(e){var t=e[this.searchKeyword];this.searchInput.nativeElement.value=t,this.data=[e],this.activeSuggestion=0,this.selectedValue.emit(e),this.showSearches=!1},e.prototype.trackById=function(e,t){return t._id},e.prototype.closeDropDown=function(){this.showSearches=!1},e.prototype.changeSuggestion=function(e){if(13===e.keyCode)0!=this.data.length&&(this.setValue(this.data[this.activeSuggestion]),this.scrollTo());else if(38==e.keyCode){if(0==this.activeSuggestion)return!1;this.activeSuggestion=this.activeSuggestion-1,this.scrollTo()}else if(40==e.keyCode){if(this.activeSuggestion==this.data.length-1)return!1;this.activeSuggestion=this.activeSuggestion+1,this.scrollTo()}},e.prototype.scrollTo=function(){var e="list"+this.activeSuggestion;document.getElementById(e).scrollIntoView(),window.scrollTo(0,0)},e.decorators=[{type:t.Component,args:[{selector:"ngx-autocomplete",template:'\n    <div class="position-relative">\n\n    <input type="text" class="form-control" [placeholder]="placeholderValue" id="auto-search" #searchInput autocomplete="off" [id]="inputId+1" (click)="showSearches = true" (keyup)="changeSuggestion($event)">\n    \n    <div [id]="inputId+2" clickOutside (clickOutside)="closeDropDown()" [inputId]="inputId+1" [hidden]="!showSearches" class="dropdown-content">\n        <a *ngFor="let entry of data; trackBy: trackById;let i = index" tappable (click)="setValue(entry)"  [ngClass]="{ \'suggestion-active\' : i == activeSuggestion} " id="list{{i}}">\n                {{entry[searchKeyword] }}   \n        </a>\n        <a *ngIf="data && data.length <= 0 && !isSearching" >No Data Found</a>\n        <a *ngIf="isSearching">Searching...</a>\n    </div>\n    \n  </div>\n  ',styles:["\n  \n    .dropdown-content {\n      background-color: #fafafa;\n      width: 100%;\n      max-height: 150px;\n      overflow-y: auto;\n      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n      z-index: 1;\n      cursor: pointer;\n    }\n\n    .dropdown-content a {\n      color: black;\n      padding: 15px 18px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .suggestion-active, .dropdown-content a:hover {background-color: #f1f1f1}\n\n    input {\n      width: 100%;\n      padding: 12px 20px;\n      margin: 8px 0;\n      box-sizing: border-box;\n    }\n \n  "]}]}],e.ctorParameters=function(){return[]},e.propDecorators={entries:[{type:t.Input}],placeholderValue:[{type:t.Input}],inputId:[{type:t.Input}],searchKeyword:[{type:t.Input}],searchInput:[{type:t.ViewChild,args:["searchInput",{static:!0}]}],selectedValue:[{type:t.Output}]},e}();var s=function(){function e(e){this._elementRef=e,this.clickOutside=new t.EventEmitter}return e.prototype.onClick=function(e){e.id!=this.inputId&&(this._elementRef.nativeElement.contains(e)||this.clickOutside.emit(null))},e.decorators=[{type:t.Directive,args:[{selector:"[clickOutside]"}]}],e.ctorParameters=function(){return[{type:t.ElementRef}]},e.propDecorators={clickOutside:[{type:t.Output}],inputId:[{type:t.Input}],onClick:[{type:t.HostListener,args:["document:click",["$event.target"]]}]},e}();var c=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[a,s],imports:[i.CommonModule],exports:[a]}]}],e}();e.NgxAutocompleteComponent=a,e.NgxAutocompleteModule=c,e.NgxAutocompleteService=r,e.ɵa=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-angular-autocomplete.umd.min.js.map
/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Output, EventEmitter, Input } from '@angular/core';
import { of, fromEvent } from "rxjs";
import { debounceTime, map, switchMap, tap } from "rxjs/operators";
export class NgxAutocompleteComponent {
    constructor() {
        this.selectedValue = new EventEmitter();
        this.data = [];
        this.showSearches = false;
        this.isSearching = false;
        this.activeSuggestion = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dataSearch();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getData(name) {
        /** @type {?} */
        let data = this.entries.filter((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return val[this.searchKeyword].toLowerCase().includes(name.toLowerCase()) == true;
        }));
        return of(data);
    }
    /**
     * @return {?}
     */
    dataSearch() {
        /** @type {?} */
        const search$ = fromEvent(this.searchInput.nativeElement, 'input').pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.target.value)), debounceTime(500), tap((/**
         * @return {?}
         */
        () => this.isSearching = true)), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        (term) => term ? this.getData(term) : of([]))), tap((/**
         * @return {?}
         */
        () => {
            this.isSearching = false,
                this.showSearches = true;
        })));
        search$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.isSearching = false;
            this.data = data;
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setValue(data) {
        /** @type {?} */
        let value = data[this.searchKeyword];
        this.searchInput.nativeElement.value = value;
        this.data = [data];
        this.activeSuggestion = 0;
        this.selectedValue.emit(data);
        this.showSearches = false;
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackById(index, item) {
        return item._id;
    }
    /**
     * @return {?}
     */
    closeDropDown() {
        this.showSearches = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    changeSuggestion(e) {
        if (e.keyCode === 13) {
            if (this.data.length != 0) {
                this.setValue(this.data[this.activeSuggestion]);
                this.scrollTo();
            }
        }
        // User pressed the up arrow
        else if (e.keyCode == 38) {
            if (this.activeSuggestion == 0) {
                return false;
            }
            else {
                this.activeSuggestion = this.activeSuggestion - 1;
                this.scrollTo();
            }
        }
        // User pressed the down arrow
        else if (e.keyCode == 40) {
            if (this.activeSuggestion == this.data.length - 1) {
                return false;
            }
            else {
                this.activeSuggestion = this.activeSuggestion + 1;
                this.scrollTo();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    scrollTo() {
        /** @type {?} */
        let str = `list${this.activeSuggestion}`;
        /** @type {?} */
        let elmnt = document.getElementById(str);
        elmnt.scrollIntoView();
        window.scrollTo(0, 0);
    }
}
NgxAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-autocomplete',
                template: `
    <div class="position-relative">

    <input type="text" class="form-control" [placeholder]="placeholderValue" id="auto-search" #searchInput autocomplete="off" [id]="inputId+1" (click)="showSearches = true" (keyup)="changeSuggestion($event)">
    
    <div [id]="inputId+2" clickOutside (clickOutside)="closeDropDown()" [inputId]="inputId+1" [hidden]="!showSearches" class="dropdown-content">
        <a *ngFor="let entry of data; trackBy: trackById;let i = index" tappable (click)="setValue(entry)"  [ngClass]="{ 'suggestion-active' : i == activeSuggestion} " id="list{{i}}">
                {{entry[searchKeyword] }}   
        </a>
        <a *ngIf="data && data.length <= 0 && !isSearching" >No Data Found</a>
        <a *ngIf="isSearching">Searching...</a>
    </div>
    
  </div>
  `,
                styles: [`
  
    .dropdown-content {
      background-color: #fafafa;
      width: 100%;
      max-height: 150px;
      overflow-y: auto;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      cursor: pointer;
    }

    .dropdown-content a {
      color: black;
      padding: 15px 18px;
      text-decoration: none;
      display: block;
    }

    .suggestion-active, .dropdown-content a:hover {background-color: #f1f1f1}

    input {
      width: 100%;
      padding: 12px 20px;
      margin: 8px 0;
      box-sizing: border-box;
    }
 
  `]
            }] }
];
/** @nocollapse */
NgxAutocompleteComponent.ctorParameters = () => [];
NgxAutocompleteComponent.propDecorators = {
    entries: [{ type: Input }],
    placeholderValue: [{ type: Input }],
    inputId: [{ type: Input }],
    searchKeyword: [{ type: Input }],
    searchInput: [{ type: ViewChild, args: ['searchInput', { static: true },] }],
    selectedValue: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxAutocompleteComponent.prototype.entries;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.placeholderValue;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.inputId;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchKeyword;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchInput;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.selectedValue;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.data;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.showSearches;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.isSearching;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.activeSuggestion;
    /** @type {?} */
    NgxAutocompleteComponent.prototype.searchValue;
}
//# sourceMappingURL=data:application/json;base64,